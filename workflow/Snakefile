import os

configfile: "config/config.yaml"

report: "workflow.rst"

endfiles = [
    os.path.join(
        config["outdir"],
        "{subid}",
        "{subid}_static_FC.csv"
    ),
    os.path.join(
        config["outdir"],
        "{subid}",
        "{subid}_FCD.csv"
    ),
    os.path.join(
        config["outdir"],
        "{subid}",
        "{subid}_FCD_histogram_counts.csv"
    ),
    os.path.join(
        config["outdir"],
        "{subid}",
        "figs",
        "{subid}_FCD_histogram.png"
    ),
    os.path.join(
        config["outdir"],
        "wb_command",
        "{subid}",
        "{subid}_task-rest_boldmap.pconn.nii"
    )
]

subids = [i for i in os.listdir(config["rawdir"]) if i.startswith("sub-LE")]

rule all:
    """
    Generates all required outputs
    """
    input:
        expand(
            endfiles,
            subid=subids
        ),


rule fmriprep_ciftify:
    """Applies the fmriprep and ciftify pipelines to the data"""
    input:
        os.path.join(
            config["rawdir"],
            "{subid}",
            "anat",
            "{subid}_T1w.nii.gz"
        ),
        os.path.join(
            config["rawdir"],
            "{subid}",
            "anat",
            "{subid}_T2w.nii.gz"
        ),
        os.path.join(
            config["rawdir"],
            "{subid}",
            "fmap",
            "{subid}_magnitude1.nii.gz"
        ),
        os.path.join(
            config["rawdir"],
            "{subid}",
            "fmap",
            "{subid}_magnitude2.nii.gz"
        ),
        os.path.join(
            config["rawdir"],
            "{subid}",
            "fmap",
            "{subid}_phasediff.nii.gz"
        ),
        os.path.join(
            config["rawdir"],
            "{subid}",
            "func",
            "{subid}_task-rest_bold.nii.gz"
        )
    params:
        bids_dir=config["rawdir"],
        out_dir=config["outdir"],
        fs_license=os.path.join(
            config["resourcedir"],
            "license.txt"
        )
    output:
        os.path.join(
            config["outdir"],
            "ciftify",
            "{subid}",
            "MNINonLinear/Results/task-rest_desc-preproc/task-rest_desc-preproc_Atlas_s0.dtseries.nii"
        )
    shell:
        "docker run -ti --rm "
        "-v {params.bids_dir}:/data:ro "
        "-v {params.out_dir}:/out "
        "-v {params.fs_license}:/opt/license.txt "
        "tigrlab/fmriprep_ciftify:v1.3.2-2.3.3 "
        "/data /out participant "
        "--participant_label {wildcards.subid} "
        "--fs-license /opt/freesurfer/license.txt "
        "--fmriprep-args \"--skip_bids_validation --n_cpus 10\""

rule ciftify_atlas:
    input:
        atlas=os.path.join(
            config["resourcedir"],
            "tpl-MNI152Nlin2009c_atlas-DesikanKilliany_desc-ranked_dseg.nii.gz"
        ),
        bold=os.path.join(
            config["outdir"],
            "ciftify",
            "{subid}",
            "MNINonLinear/Results/task-rest_desc-preproc/task-rest_desc-preproc_Atlas_s0.dtseries.nii"
        )
    params:
        cifti_dir=os.path.join(
            config["outdir"],
            "ciftify"
        ),
        entrypoint="scripts/ciftify_entrypoint.sh"
    output:
        os.path.join(
            config["outdir"],
            "ciftify",
            "{subid}",
            "{subid}.aparc.dlabel.nii"
        )
    conda:
        "envs/wb_command_env.yml"
    shell:
        "docker run -ti --rm "
        "-v ./:/workflow "
        "-v {input.atlas}:/opt/nifti_atlas.nii.gz "
        "-v {params.cifti_dir}:/ciftify "
        "--entrypoint /workflow/{params.entrypoint} "
        "tigrlab/fmriprep_ciftify:v1.3.2-2.3.3 "
        "{wildcards.subid} "
        "/opt/nifti_atlas.nii.gz "
        "/ciftify/{wildcards.subid}/{wildcards.subid}.aparc.dscalar.nii "
        "--ciftify-work-dir /ciftify "
        "--integer-labels --resample-nifti && "
        "scripts/workbench/bin_macosxub/wb_command -cifti-label-import "
        "{params.cifti_dir}/{wildcards.subid}/{wildcards.subid}.aparc.dscalar.nii "
        "\'\'"
        "{output}"

rule extract_timeseries:
    input:
        atlas=os.path.join(
            config["outdir"],
            "ciftify",
            "{subid}",
            "{subid}.aparc.dlabel.nii"
        ),
        bold=os.path.join(
            config["outdir"],
            "ciftify",
            "{subid}",
            "MNINonLinear/Results/task-rest_desc-preproc/task-rest_desc-preproc_Atlas_s0.dtseries.nii"
        )
    params:
        resdir=os.path.join(
            config["outdir"],
            "wb_command",
            "{subid}"
        )
    output:
        os.path.join(
            config["outdir"],
            "wb_command",
            "{subid}",
            "{subid}_task-rest_timeseries.ptseries.nii"
        )
    conda:
        "envs/wb_command_env.yml"
    shell:
        "mkdir -p {params.resdir} && "
        "scripts/workbench/bin_macosxub/wb_command -cifti-parcellate "
        "{input.bold} {input.atlas} COLUMN "
        "{output}"

rule calculate_static_fc:
    input:
        os.path.join(
            config["outdir"],
            "wb_command",
            "{subid}",
            "{subid}_task-rest_timeseries.ptseries.nii"
        )
    output:
        os.path.join(
            config["outdir"],
            "wb_command",
            "{subid}",
            "{subid}_task-rest_boldmap.pconn.nii"
        )
    conda:
        "envs/wb_command_env.yml"
    shell:
        "scripts/workbench/bin_macosxub/wb_command -cifti-correlation {input} {output}"

rule calculate_fcd:
    input:
        os.path.join(
            config["outdir"],
            "wb_command",
            "{subid}",
            "{subid}_task-rest_timeseries.ptseries.nii"
        )
    params:
        outdir=os.path.join(
            config["outdir"],
            "python"
        )
    output:
        os.path.join(
            config["outdir"],
            "{subid}",
            "{subid}_static_FC.csv"
        ),
        os.path.join(
            config["outdir"],
            "{subid}",
            "{subid}_FCD.csv"
        ),
        os.path.join(
            config["outdir"],
            "{subid}",
            "{subid}_FCD_histogram_counts.csv"
        ),
        os.path.join(
            config["outdir"],
            "{subid}",
            "figs",
            "{subid}_FCD_histogram.png"
        )
    shell:
        "python scipts/fc_analysis.py {wildcards.subid} {input} {params.outdir}"
    


